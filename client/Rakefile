require 'gsm_modem'
require 'dongle'
require 'test_kit'

task :default do
	puts "Project Lost Treasure"
end


task :run, :method, :param1 do |task, args|
	test_kit = TestKit.new
	args[:method] ||= :file
	begin
		case args[:method].to_sym
		when :file
			test_kit.run_using_file(args[:param1])		
		when :sqs
			test_kit.run_using_sqs
		end
	ensure		
		test_kit.close if !test_kit.nil?
	end
end

task :port_sweep do
	#dongles should respond really fast in a sweep
	sweep_timeout = 5
	Dongle.port_sweep(sweep_timeout)
end

namespace :dongle do

	desc "Get the number of this dongle"
	task :number, :com_port do |task, args|
		dongle = nil
		begin
			dongle = Dongle.new(args[:com_port])
			puts dongle.number
		rescue ThreadError => ex
			puts ex.message
		ensure
			dongle.close if !dongle.nil?
		end		
	end
	
	desc "Get the available balance for this dongle"
	task :balance, :com_port do |task, args| 
		dongle = nil
		begin
			dongle = Dongle.new(args[:com_port])
			puts dongle.balance_inquiry
		rescue ThreadError => ex
			puts ex.message	
		ensure
			dongle.close if !dongle.nil?
		end	
	end
	
	desc "Send SMS to some number"
	task :send_message, :com_port, :number, :message do |task, args|
		dongle = nil
		begin
			dongle = Dongle.new(args[:com_port])
			puts dongle.send_message(args[:number],args[:message])
		rescue ThreadError => ex
			puts ex.message	
		ensure
			dongle.close if !dongle.nil?
		end		
	end
	
	desc "Set number of dongle. This is not set by default on Globe prepaid sims."
	task :set_number, :com_port, :number do |task, args|
		dongle = nil
		begin
			dongle = Dongle.new(args[:com_port])
			puts dongle.set_number(args[:number])
		rescue ThreadError => ex
			puts ex.message	
		ensure
			dongle.close if !dongle.nil?
		end		
	end	
	
	desc "Delete all messages"
	task :delete_all_messages, :com_port do |task, args|
		dongle = nil
		begin
			dongle = Dongle.new(args[:com_port])
			puts dongle.delete_all_messages
		rescue ThreadError => ex
			puts ex.message
		rescue StandardError => ex
			puts "#{ex.class.name} - #{ex.message}"
		ensure
			dongle.close if !dongle.nil?
		end		
	end

	desc "Open the port, and do not release"
	#http://blog.stevenocchipinti.com/2013/10/18/rake-task-with-an-arbitrary-number-of-arguments/
	task :hog do |task, args| 
		dongles = []
		begin
			args.extras.each do |port|
				puts "Hogging PORT #{port}..."
				dongles << Dongle.new(port)
			end
			sleep 
		rescue ThreadError => ex
			puts ex.message
		rescue StandardError => ex
			puts "#{ex.class.name} - #{ex.message}"
		ensure
			dongles.each do |dongle|
				dongle.close if !dongle.nil?
			end if !dongles.nil?
		end			
	end
end